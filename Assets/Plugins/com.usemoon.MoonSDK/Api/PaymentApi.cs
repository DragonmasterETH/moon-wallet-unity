/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.usemoon.MoonSDK.Client;
using com.usemoon.MoonSDK.Model;

namespace com.usemoon.MoonSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <returns>Object</returns>
        Object MoralisWebhook(string id, IWebhook iWebhook);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MoralisWebhookWithHttpInfo(string id, IWebhook iWebhook);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>PaymentIntentResponse</returns>
        PaymentIntentResponse PaymentCreatePaymentIntent(string authorization, CreatePaymentIntentInput createPaymentIntentInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        ApiResponse<PaymentIntentResponse> PaymentCreatePaymentIntentWithHttpInfo(string authorization, CreatePaymentIntentInput createPaymentIntentInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>PaymentIntentResponse</returns>
        PaymentIntentResponse PaymentDeletePaymentIntent(string authorization, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        ApiResponse<PaymentIntentResponse> PaymentDeletePaymentIntentWithHttpInfo(string authorization, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;PaymentIntentResponse&gt;</returns>
        List<PaymentIntentResponse> PaymentGetAllPaymentIntents(string authorization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;PaymentIntentResponse&gt;</returns>
        ApiResponse<List<PaymentIntentResponse>> PaymentGetAllPaymentIntentsWithHttpInfo(string authorization);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> PaymentGetAvailableChains();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> PaymentGetAvailableChainsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>PaymentIntentResponse</returns>
        PaymentIntentResponse PaymentGetPaymentIntent(string authorization, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        ApiResponse<PaymentIntentResponse> PaymentGetPaymentIntentWithHttpInfo(string authorization, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>PaymentIntentResponse</returns>
        PaymentIntentResponse PaymentUpdatePaymentIntent(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        ApiResponse<PaymentIntentResponse> PaymentUpdatePaymentIntentWithHttpInfo(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object TatumWebhook(string id, Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TatumWebhookWithHttpInfo(string id, Object body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MoralisWebhookAsync(string id, IWebhook iWebhook, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoralisWebhookWithHttpInfoAsync(string id, IWebhook iWebhook, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        System.Threading.Tasks.Task<PaymentIntentResponse> PaymentCreatePaymentIntentAsync(string authorization, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentIntentResponse>> PaymentCreatePaymentIntentWithHttpInfoAsync(string authorization, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        System.Threading.Tasks.Task<PaymentIntentResponse> PaymentDeletePaymentIntentAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentIntentResponse>> PaymentDeletePaymentIntentWithHttpInfoAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentIntentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PaymentIntentResponse>> PaymentGetAllPaymentIntentsAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentIntentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PaymentIntentResponse>>> PaymentGetAllPaymentIntentsWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> PaymentGetAvailableChainsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> PaymentGetAvailableChainsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        System.Threading.Tasks.Task<PaymentIntentResponse> PaymentGetPaymentIntentAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentIntentResponse>> PaymentGetPaymentIntentWithHttpInfoAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        System.Threading.Tasks.Task<PaymentIntentResponse> PaymentUpdatePaymentIntentAsync(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentIntentResponse>> PaymentUpdatePaymentIntentWithHttpInfoAsync(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TatumWebhookAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TatumWebhookWithHttpInfoAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentApi : IPaymentApiSync, IPaymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentApi : IDisposable, IPaymentApi
    {
        private com.usemoon.MoonSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PaymentApi(string basePath)
        {
            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                new com.usemoon.MoonSDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PaymentApi(com.usemoon.MoonSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PaymentApi(com.usemoon.MoonSDK.Client.ISynchronousClient client, com.usemoon.MoonSDK.Client.IAsynchronousClient asyncClient, com.usemoon.MoonSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public com.usemoon.MoonSDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.usemoon.MoonSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <returns>Object</returns>
        public Object MoralisWebhook(string id, IWebhook iWebhook)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<Object> localVarResponse = MoralisWebhookWithHttpInfo(id, iWebhook);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<Object> MoralisWebhookWithHttpInfo(string id, IWebhook iWebhook)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->MoralisWebhook");

            // verify the required parameter 'iWebhook' is set
            if (iWebhook == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'iWebhook' when calling PaymentApi->MoralisWebhook");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = iWebhook;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/payment/webhook/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoralisWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MoralisWebhookAsync(string id, IWebhook iWebhook, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = MoralisWebhookWithHttpInfoAsync(id, iWebhook, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="iWebhook"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<Object>> MoralisWebhookWithHttpInfoAsync(string id, IWebhook iWebhook, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->MoralisWebhook");

            // verify the required parameter 'iWebhook' is set
            if (iWebhook == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'iWebhook' when calling PaymentApi->MoralisWebhook");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = iWebhook;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/payment/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoralisWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>PaymentIntentResponse</returns>
        public PaymentIntentResponse PaymentCreatePaymentIntent(string authorization, CreatePaymentIntentInput createPaymentIntentInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = PaymentCreatePaymentIntentWithHttpInfo(authorization, createPaymentIntentInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> PaymentCreatePaymentIntentWithHttpInfo(string authorization, CreatePaymentIntentInput createPaymentIntentInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentCreatePaymentIntent");

            // verify the required parameter 'createPaymentIntentInput' is set
            if (createPaymentIntentInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'createPaymentIntentInput' when calling PaymentApi->PaymentCreatePaymentIntent");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPaymentIntentInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentIntentResponse>("/payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentCreatePaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentIntentResponse> PaymentCreatePaymentIntentAsync(string authorization, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PaymentCreatePaymentIntentWithHttpInfoAsync(authorization, createPaymentIntentInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse>> PaymentCreatePaymentIntentWithHttpInfoAsync(string authorization, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentCreatePaymentIntent");

            // verify the required parameter 'createPaymentIntentInput' is set
            if (createPaymentIntentInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'createPaymentIntentInput' when calling PaymentApi->PaymentCreatePaymentIntent");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPaymentIntentInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PaymentIntentResponse>("/payment", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentCreatePaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>PaymentIntentResponse</returns>
        public PaymentIntentResponse PaymentDeletePaymentIntent(string authorization, string id)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = PaymentDeletePaymentIntentWithHttpInfo(authorization, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> PaymentDeletePaymentIntentWithHttpInfo(string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentDeletePaymentIntent");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentDeletePaymentIntent");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<PaymentIntentResponse>("/payment/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentDeletePaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentIntentResponse> PaymentDeletePaymentIntentAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PaymentDeletePaymentIntentWithHttpInfoAsync(authorization, id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse>> PaymentDeletePaymentIntentWithHttpInfoAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentDeletePaymentIntent");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentDeletePaymentIntent");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<PaymentIntentResponse>("/payment/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentDeletePaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;PaymentIntentResponse&gt;</returns>
        public List<PaymentIntentResponse> PaymentGetAllPaymentIntents(string authorization)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<List<PaymentIntentResponse>> localVarResponse = PaymentGetAllPaymentIntentsWithHttpInfo(authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;PaymentIntentResponse&gt;</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<List<PaymentIntentResponse>> PaymentGetAllPaymentIntentsWithHttpInfo(string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentGetAllPaymentIntents");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentIntentResponse>>("/payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentGetAllPaymentIntents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentIntentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PaymentIntentResponse>> PaymentGetAllPaymentIntentsAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PaymentGetAllPaymentIntentsWithHttpInfoAsync(authorization, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<List<PaymentIntentResponse>> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<List<PaymentIntentResponse>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentIntentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<List<PaymentIntentResponse>>> PaymentGetAllPaymentIntentsWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentGetAllPaymentIntents");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<PaymentIntentResponse>>("/payment", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentGetAllPaymentIntents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> PaymentGetAvailableChains()
        {
            com.usemoon.MoonSDK.Client.ApiResponse<List<string>> localVarResponse = PaymentGetAvailableChainsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<List<string>> PaymentGetAvailableChainsWithHttpInfo()
        {
            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/payment/chains", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentGetAvailableChains", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> PaymentGetAvailableChainsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PaymentGetAvailableChainsWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<List<string>> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<List<string>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<List<string>>> PaymentGetAvailableChainsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<string>>("/payment/chains", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentGetAvailableChains", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>PaymentIntentResponse</returns>
        public PaymentIntentResponse PaymentGetPaymentIntent(string authorization, string id)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = PaymentGetPaymentIntentWithHttpInfo(authorization, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> PaymentGetPaymentIntentWithHttpInfo(string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentGetPaymentIntent");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentGetPaymentIntent");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentIntentResponse>("/payment/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentGetPaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentIntentResponse> PaymentGetPaymentIntentAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PaymentGetPaymentIntentWithHttpInfoAsync(authorization, id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse>> PaymentGetPaymentIntentWithHttpInfoAsync(string authorization, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentGetPaymentIntent");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentGetPaymentIntent");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PaymentIntentResponse>("/payment/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentGetPaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>PaymentIntentResponse</returns>
        public PaymentIntentResponse PaymentUpdatePaymentIntent(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = PaymentUpdatePaymentIntentWithHttpInfo(authorization, id, createPaymentIntentInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <returns>ApiResponse of PaymentIntentResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> PaymentUpdatePaymentIntentWithHttpInfo(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentUpdatePaymentIntent");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentUpdatePaymentIntent");

            // verify the required parameter 'createPaymentIntentInput' is set
            if (createPaymentIntentInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'createPaymentIntentInput' when calling PaymentApi->PaymentUpdatePaymentIntent");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPaymentIntentInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PaymentIntentResponse>("/payment/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentUpdatePaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentIntentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentIntentResponse> PaymentUpdatePaymentIntentAsync(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PaymentUpdatePaymentIntentWithHttpInfoAsync(authorization, id, createPaymentIntentInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="createPaymentIntentInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentIntentResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<PaymentIntentResponse>> PaymentUpdatePaymentIntentWithHttpInfoAsync(string authorization, string id, CreatePaymentIntentInput createPaymentIntentInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->PaymentUpdatePaymentIntent");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentUpdatePaymentIntent");

            // verify the required parameter 'createPaymentIntentInput' is set
            if (createPaymentIntentInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'createPaymentIntentInput' when calling PaymentApi->PaymentUpdatePaymentIntent");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPaymentIntentInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<PaymentIntentResponse>("/payment/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentUpdatePaymentIntent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object TatumWebhook(string id, Object body)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<Object> localVarResponse = TatumWebhookWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<Object> TatumWebhookWithHttpInfo(string id, Object body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->TatumWebhook");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentApi->TatumWebhook");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/payment/tatum/webhook/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TatumWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TatumWebhookAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TatumWebhookWithHttpInfoAsync(id, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<Object>> TatumWebhookWithHttpInfoAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'id' when calling PaymentApi->TatumWebhook");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentApi->TatumWebhook");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/payment/tatum/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TatumWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
