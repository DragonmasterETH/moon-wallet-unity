/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.usemoon.MoonSDK.Client;
using com.usemoon.MoonSDK.Model;

namespace com.usemoon.MoonSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IErc721ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse Approve(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> ApproveWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse BalanceOf(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> BalanceOfWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse GetApproved(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> GetApprovedWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse IsApprovedForAll(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> IsApprovedForAllWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse Name(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> NameWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse OwnerOf(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> OwnerOfWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse SafeTransferFrom(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> SafeTransferFromWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse SetApprovalForAll(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> SetApprovalForAllWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse Symbol(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> SymbolWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse TokenUri(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> TokenUriWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse Transfer(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> TransferWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse TransferFrom(string authorization, string name, Erc721Request erc721Request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> TransferFromWithHttpInfo(string authorization, string name, Erc721Request erc721Request);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IErc721ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> ApproveAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> ApproveWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> BalanceOfAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> BalanceOfWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> GetApprovedAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> GetApprovedWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> IsApprovedForAllAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> IsApprovedForAllWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> NameAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> NameWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> OwnerOfAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> OwnerOfWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> SafeTransferFromAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> SafeTransferFromWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> SetApprovalForAllAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> SetApprovalForAllWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> SymbolAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> SymbolWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> TokenUriAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> TokenUriWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> TransferAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> TransferWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> TransferFromAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> TransferFromWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IErc721Api : IErc721ApiSync, IErc721ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Erc721Api : IDisposable, IErc721Api
    {
        private com.usemoon.MoonSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Erc721Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public Erc721Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Erc721Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public Erc721Api(string basePath)
        {
            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                new com.usemoon.MoonSDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Erc721Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public Erc721Api(com.usemoon.MoonSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Erc721Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public Erc721Api(com.usemoon.MoonSDK.Client.ISynchronousClient client, com.usemoon.MoonSDK.Client.IAsynchronousClient asyncClient, com.usemoon.MoonSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public com.usemoon.MoonSDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.usemoon.MoonSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse Approve(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = ApproveWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> ApproveWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Approve");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Approve");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Approve");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/approve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Approve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> ApproveAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ApproveWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> ApproveWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Approve");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Approve");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Approve");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/approve", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Approve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse BalanceOf(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = BalanceOfWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> BalanceOfWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->BalanceOf");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->BalanceOf");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->BalanceOf");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/balance-of", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceOf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> BalanceOfAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BalanceOfWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> BalanceOfWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->BalanceOf");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->BalanceOf");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->BalanceOf");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/balance-of", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceOf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse GetApproved(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = GetApprovedWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> GetApprovedWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->GetApproved");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->GetApproved");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->GetApproved");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/get-approved", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApproved", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> GetApprovedAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetApprovedWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> GetApprovedWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->GetApproved");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->GetApproved");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->GetApproved");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/get-approved", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApproved", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse IsApprovedForAll(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = IsApprovedForAllWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> IsApprovedForAllWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->IsApprovedForAll");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->IsApprovedForAll");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->IsApprovedForAll");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/is-approved-for-all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsApprovedForAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> IsApprovedForAllAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = IsApprovedForAllWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> IsApprovedForAllWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->IsApprovedForAll");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->IsApprovedForAll");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->IsApprovedForAll");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/is-approved-for-all", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsApprovedForAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse Name(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = NameWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> NameWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Name");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Name");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Name");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Name", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> NameAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = NameWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> NameWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Name");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Name");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Name");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/name", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Name", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse OwnerOf(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = OwnerOfWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> OwnerOfWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->OwnerOf");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->OwnerOf");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->OwnerOf");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/owner-of", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OwnerOf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> OwnerOfAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OwnerOfWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> OwnerOfWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->OwnerOf");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->OwnerOf");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->OwnerOf");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/owner-of", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OwnerOf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse SafeTransferFrom(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = SafeTransferFromWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> SafeTransferFromWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->SafeTransferFrom");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->SafeTransferFrom");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->SafeTransferFrom");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/safe-transfer-from", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SafeTransferFrom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> SafeTransferFromAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SafeTransferFromWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> SafeTransferFromWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->SafeTransferFrom");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->SafeTransferFrom");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->SafeTransferFrom");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/safe-transfer-from", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SafeTransferFrom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse SetApprovalForAll(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = SetApprovalForAllWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> SetApprovalForAllWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->SetApprovalForAll");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->SetApprovalForAll");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->SetApprovalForAll");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/set-approval-for-all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetApprovalForAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> SetApprovalForAllAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SetApprovalForAllWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> SetApprovalForAllWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->SetApprovalForAll");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->SetApprovalForAll");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->SetApprovalForAll");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/set-approval-for-all", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetApprovalForAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse Symbol(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = SymbolWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> SymbolWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Symbol");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Symbol");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Symbol");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/symbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Symbol", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> SymbolAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SymbolWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> SymbolWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Symbol");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Symbol");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Symbol");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/symbol", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Symbol", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse TokenUri(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = TokenUriWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> TokenUriWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->TokenUri");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->TokenUri");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->TokenUri");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/token-uri", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenUri", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> TokenUriAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TokenUriWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> TokenUriWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->TokenUri");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->TokenUri");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->TokenUri");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/token-uri", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenUri", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse Transfer(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = TransferWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> TransferWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Transfer");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Transfer");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Transfer");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/transfer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> TransferAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> TransferWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->Transfer");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->Transfer");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->Transfer");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/transfer", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse TransferFrom(string authorization, string name, Erc721Request erc721Request)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = TransferFromWithHttpInfo(authorization, name, erc721Request);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> TransferFromWithHttpInfo(string authorization, string name, Erc721Request erc721Request)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->TransferFrom");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->TransferFrom");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->TransferFrom");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/erc721/{name}/transfer-from", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferFrom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> TransferFromAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferFromWithHttpInfoAsync(authorization, name, erc721Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="name"></param>
        /// <param name="erc721Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> TransferFromWithHttpInfoAsync(string authorization, string name, Erc721Request erc721Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling Erc721Api->TransferFrom");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'name' when calling Erc721Api->TransferFrom");

            // verify the required parameter 'erc721Request' is set
            if (erc721Request == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'erc721Request' when calling Erc721Api->TransferFrom");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = erc721Request;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/erc721/{name}/transfer-from", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferFrom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
