/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.usemoon.MoonSDK.Client;
using com.usemoon.MoonSDK.Model;

namespace com.usemoon.MoonSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse CreateSolanaAccount(string authorization, SolanaInput solanaInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> CreateSolanaAccountWithHttpInfo(string authorization, SolanaInput solanaInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse GetSolanaAccount(string authorization, string accountName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> GetSolanaAccountWithHttpInfo(string authorization, string accountName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse ListSolanaAccounts(string authorization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> ListSolanaAccountsWithHttpInfo(string authorization);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <returns>AccountControllerResponse</returns>
        AccountControllerResponse SignSolanaTransaction(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        ApiResponse<AccountControllerResponse> SignSolanaTransactionWithHttpInfo(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> CreateSolanaAccountAsync(string authorization, SolanaInput solanaInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> CreateSolanaAccountWithHttpInfoAsync(string authorization, SolanaInput solanaInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> GetSolanaAccountAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> GetSolanaAccountWithHttpInfoAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> ListSolanaAccountsAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> ListSolanaAccountsWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        System.Threading.Tasks.Task<AccountControllerResponse> SignSolanaTransactionAsync(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountControllerResponse>> SignSolanaTransactionWithHttpInfoAsync(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApi : ISolanaApiSync, ISolanaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SolanaApi : IDisposable, ISolanaApi
    {
        private com.usemoon.MoonSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SolanaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SolanaApi(string basePath)
        {
            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                new com.usemoon.MoonSDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SolanaApi(com.usemoon.MoonSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.usemoon.MoonSDK.Client.Configuration.MergeConfigurations(
                com.usemoon.MoonSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new com.usemoon.MoonSDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SolanaApi(com.usemoon.MoonSDK.Client.ISynchronousClient client, com.usemoon.MoonSDK.Client.IAsynchronousClient asyncClient, com.usemoon.MoonSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.usemoon.MoonSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public com.usemoon.MoonSDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.usemoon.MoonSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.usemoon.MoonSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse CreateSolanaAccount(string authorization, SolanaInput solanaInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = CreateSolanaAccountWithHttpInfo(authorization, solanaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> CreateSolanaAccountWithHttpInfo(string authorization, SolanaInput solanaInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->CreateSolanaAccount");

            // verify the required parameter 'solanaInput' is set
            if (solanaInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'solanaInput' when calling SolanaApi->CreateSolanaAccount");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = solanaInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/solana", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSolanaAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> CreateSolanaAccountAsync(string authorization, SolanaInput solanaInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateSolanaAccountWithHttpInfoAsync(authorization, solanaInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="solanaInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> CreateSolanaAccountWithHttpInfoAsync(string authorization, SolanaInput solanaInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->CreateSolanaAccount");

            // verify the required parameter 'solanaInput' is set
            if (solanaInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'solanaInput' when calling SolanaApi->CreateSolanaAccount");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = solanaInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/solana", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSolanaAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse GetSolanaAccount(string authorization, string accountName)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = GetSolanaAccountWithHttpInfo(authorization, accountName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> GetSolanaAccountWithHttpInfo(string authorization, string accountName)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->GetSolanaAccount");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling SolanaApi->GetSolanaAccount");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountControllerResponse>("/solana/{accountName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolanaAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> GetSolanaAccountAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetSolanaAccountWithHttpInfoAsync(authorization, accountName, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> GetSolanaAccountWithHttpInfoAsync(string authorization, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->GetSolanaAccount");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling SolanaApi->GetSolanaAccount");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountControllerResponse>("/solana/{accountName}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSolanaAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse ListSolanaAccounts(string authorization)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = ListSolanaAccountsWithHttpInfo(authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> ListSolanaAccountsWithHttpInfo(string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->ListSolanaAccounts");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountControllerResponse>("/solana", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSolanaAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> ListSolanaAccountsAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ListSolanaAccountsWithHttpInfoAsync(authorization, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> ListSolanaAccountsWithHttpInfoAsync(string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->ListSolanaAccounts");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountControllerResponse>("/solana", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSolanaAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <returns>AccountControllerResponse</returns>
        public AccountControllerResponse SignSolanaTransaction(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput)
        {
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = SignSolanaTransactionWithHttpInfo(authorization, accountName, solanaTransactionInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <returns>ApiResponse of AccountControllerResponse</returns>
        public com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> SignSolanaTransactionWithHttpInfo(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->SignSolanaTransaction");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling SolanaApi->SignSolanaTransaction");

            // verify the required parameter 'solanaTransactionInput' is set
            if (solanaTransactionInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'solanaTransactionInput' when calling SolanaApi->SignSolanaTransaction");

            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = solanaTransactionInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountControllerResponse>("/solana/{accountName}/sign-tx", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignSolanaTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountControllerResponse</returns>
        public async System.Threading.Tasks.Task<AccountControllerResponse> SignSolanaTransactionAsync(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SignSolanaTransactionWithHttpInfoAsync(authorization, accountName, solanaTransactionInput, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="com.usemoon.MoonSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="accountName"></param>
        /// <param name="solanaTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountControllerResponse)</returns>
        public async System.Threading.Tasks.Task<com.usemoon.MoonSDK.Client.ApiResponse<AccountControllerResponse>> SignSolanaTransactionWithHttpInfoAsync(string authorization, string accountName, SolanaTransactionInput solanaTransactionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'authorization' when calling SolanaApi->SignSolanaTransaction");

            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'accountName' when calling SolanaApi->SignSolanaTransaction");

            // verify the required parameter 'solanaTransactionInput' is set
            if (solanaTransactionInput == null)
                throw new com.usemoon.MoonSDK.Client.ApiException(400, "Missing required parameter 'solanaTransactionInput' when calling SolanaApi->SignSolanaTransaction");


            com.usemoon.MoonSDK.Client.RequestOptions localVarRequestOptions = new com.usemoon.MoonSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = com.usemoon.MoonSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountName", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(accountName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", com.usemoon.MoonSDK.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = solanaTransactionInput;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountControllerResponse>("/solana/{accountName}/sign-tx", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignSolanaTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
