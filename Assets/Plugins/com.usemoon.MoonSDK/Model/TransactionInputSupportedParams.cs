/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// TransactionInputSupportedParams
    /// </summary>
    [DataContract(Name = "TransactionInput_supportedParams")]
    public partial class TransactionInputSupportedParams : IEquatable<TransactionInputSupportedParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInputSupportedParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionInputSupportedParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInputSupportedParams" /> class.
        /// </summary>
        /// <param name="partnerData">partnerData (required).</param>
        /// <param name="theme">theme (required).</param>
        public TransactionInputSupportedParams(TransactionInputSupportedParamsPartnerData partnerData = default(TransactionInputSupportedParamsPartnerData), TransactionInputSupportedParamsTheme theme = default(TransactionInputSupportedParamsTheme))
        {
            // to ensure "partnerData" is required (not null)
            if (partnerData == null)
            {
                throw new ArgumentNullException("partnerData is a required property for TransactionInputSupportedParams and cannot be null");
            }
            this.PartnerData = partnerData;
            // to ensure "theme" is required (not null)
            if (theme == null)
            {
                throw new ArgumentNullException("theme is a required property for TransactionInputSupportedParams and cannot be null");
            }
            this.Theme = theme;
        }

        /// <summary>
        /// Gets or Sets PartnerData
        /// </summary>
        [DataMember(Name = "partnerData", IsRequired = true, EmitDefaultValue = true)]
        public TransactionInputSupportedParamsPartnerData PartnerData { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name = "theme", IsRequired = true, EmitDefaultValue = true)]
        public TransactionInputSupportedParamsTheme Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionInputSupportedParams {\n");
            sb.Append("  PartnerData: ").Append(PartnerData).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionInputSupportedParams);
        }

        /// <summary>
        /// Returns true if TransactionInputSupportedParams instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionInputSupportedParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionInputSupportedParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PartnerData == input.PartnerData ||
                    (this.PartnerData != null &&
                    this.PartnerData.Equals(input.PartnerData))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartnerData != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerData.GetHashCode();
                }
                if (this.Theme != null)
                {
                    hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
