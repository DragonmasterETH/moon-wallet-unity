/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// ConveyorFinanceControllerResponse
    /// </summary>
    [DataContract(Name = "ConveyorFinanceControllerResponse")]
    public partial class ConveyorFinanceControllerResponse : IEquatable<ConveyorFinanceControllerResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConveyorFinanceControllerResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConveyorFinanceControllerResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConveyorFinanceControllerResponse" /> class.
        /// </summary>
        /// <param name="input">input.</param>
        /// <param name="convey">convey.</param>
        /// <param name="data">data.</param>
        /// <param name="tx">tx.</param>
        /// <param name="signed">signed.</param>
        /// <param name="success">success (required).</param>
        /// <param name="message">message (required).</param>
        public ConveyorFinanceControllerResponse(InputBody input = default(InputBody), TransactionResponse convey = default(TransactionResponse), TransactionData data = default(TransactionData), TransactionResponseTx tx = default(TransactionResponseTx), Transaction signed = default(Transaction), bool success = default(bool), string message = default(string))
        {
            this.Success = success;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ConveyorFinanceControllerResponse and cannot be null");
            }
            this.Message = message;
            this.Input = input;
            this.Convey = convey;
            this.Data = data;
            this.Tx = tx;
            this.Signed = signed;
        }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", EmitDefaultValue = false)]
        public InputBody Input { get; set; }

        /// <summary>
        /// Gets or Sets Convey
        /// </summary>
        [DataMember(Name = "convey", EmitDefaultValue = false)]
        public TransactionResponse Convey { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public TransactionData Data { get; set; }

        /// <summary>
        /// Gets or Sets Tx
        /// </summary>
        [DataMember(Name = "tx", EmitDefaultValue = false)]
        public TransactionResponseTx Tx { get; set; }

        /// <summary>
        /// Gets or Sets Signed
        /// </summary>
        [DataMember(Name = "signed", EmitDefaultValue = false)]
        public Transaction Signed { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConveyorFinanceControllerResponse {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Convey: ").Append(Convey).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Tx: ").Append(Tx).Append("\n");
            sb.Append("  Signed: ").Append(Signed).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConveyorFinanceControllerResponse);
        }

        /// <summary>
        /// Returns true if ConveyorFinanceControllerResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ConveyorFinanceControllerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConveyorFinanceControllerResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Convey == input.Convey ||
                    (this.Convey != null &&
                    this.Convey.Equals(input.Convey))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Tx == input.Tx ||
                    (this.Tx != null &&
                    this.Tx.Equals(input.Tx))
                ) && 
                (
                    this.Signed == input.Signed ||
                    (this.Signed != null &&
                    this.Signed.Equals(input.Signed))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                {
                    hashCode = (hashCode * 59) + this.Input.GetHashCode();
                }
                if (this.Convey != null)
                {
                    hashCode = (hashCode * 59) + this.Convey.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Tx != null)
                {
                    hashCode = (hashCode * 59) + this.Tx.GetHashCode();
                }
                if (this.Signed != null)
                {
                    hashCode = (hashCode * 59) + this.Signed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
