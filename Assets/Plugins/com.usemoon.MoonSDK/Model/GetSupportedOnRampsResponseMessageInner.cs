/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// GetSupportedOnRampsResponseMessageInner
    /// </summary>
    [DataContract(Name = "GetSupportedOnRampsResponse_message_inner")]
    public partial class GetSupportedOnRampsResponseMessageInner : IEquatable<GetSupportedOnRampsResponseMessageInner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSupportedOnRampsResponseMessageInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSupportedOnRampsResponseMessageInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSupportedOnRampsResponseMessageInner" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="icons">icons (required).</param>
        /// <param name="icon">icon (required).</param>
        public GetSupportedOnRampsResponseMessageInner(string id = default(string), string displayName = default(string), GetSupportedOnRampsResponseMessageInnerIcons icons = default(GetSupportedOnRampsResponseMessageInnerIcons), string icon = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for GetSupportedOnRampsResponseMessageInner and cannot be null");
            }
            this.Id = id;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for GetSupportedOnRampsResponseMessageInner and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "icons" is required (not null)
            if (icons == null)
            {
                throw new ArgumentNullException("icons is a required property for GetSupportedOnRampsResponseMessageInner and cannot be null");
            }
            this.Icons = icons;
            // to ensure "icon" is required (not null)
            if (icon == null)
            {
                throw new ArgumentNullException("icon is a required property for GetSupportedOnRampsResponseMessageInner and cannot be null");
            }
            this.Icon = icon;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Icons
        /// </summary>
        [DataMember(Name = "icons", IsRequired = true, EmitDefaultValue = true)]
        public GetSupportedOnRampsResponseMessageInnerIcons Icons { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = true)]
        public string Icon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSupportedOnRampsResponseMessageInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Icons: ").Append(Icons).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSupportedOnRampsResponseMessageInner);
        }

        /// <summary>
        /// Returns true if GetSupportedOnRampsResponseMessageInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSupportedOnRampsResponseMessageInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSupportedOnRampsResponseMessageInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Icons == input.Icons ||
                    (this.Icons != null &&
                    this.Icons.Equals(input.Icons))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Icons != null)
                {
                    hashCode = (hashCode * 59) + this.Icons.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
