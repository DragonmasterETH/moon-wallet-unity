/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// TransactionInputSupportedParamsTheme
    /// </summary>
    [DataContract(Name = "TransactionInput_supportedParams_theme")]
    public partial class TransactionInputSupportedParamsTheme : IEquatable<TransactionInputSupportedParamsTheme>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInputSupportedParamsTheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionInputSupportedParamsTheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInputSupportedParamsTheme" /> class.
        /// </summary>
        /// <param name="borderRadius">borderRadius (required).</param>
        /// <param name="cardColor">cardColor (required).</param>
        /// <param name="secondaryTextColor">secondaryTextColor (required).</param>
        /// <param name="primaryTextColor">primaryTextColor (required).</param>
        /// <param name="secondaryColor">secondaryColor (required).</param>
        /// <param name="primaryColor">primaryColor (required).</param>
        /// <param name="themeName">themeName (required).</param>
        /// <param name="isDark">isDark (required).</param>
        public TransactionInputSupportedParamsTheme(double? borderRadius = default(double?), string cardColor = default(string), string secondaryTextColor = default(string), string primaryTextColor = default(string), string secondaryColor = default(string), string primaryColor = default(string), string themeName = default(string), bool isDark = default(bool))
        {
            // to ensure "borderRadius" is required (not null)
            if (borderRadius == null)
            {
                throw new ArgumentNullException("borderRadius is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.BorderRadius = borderRadius;
            // to ensure "cardColor" is required (not null)
            if (cardColor == null)
            {
                throw new ArgumentNullException("cardColor is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.CardColor = cardColor;
            // to ensure "secondaryTextColor" is required (not null)
            if (secondaryTextColor == null)
            {
                throw new ArgumentNullException("secondaryTextColor is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.SecondaryTextColor = secondaryTextColor;
            // to ensure "primaryTextColor" is required (not null)
            if (primaryTextColor == null)
            {
                throw new ArgumentNullException("primaryTextColor is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.PrimaryTextColor = primaryTextColor;
            // to ensure "secondaryColor" is required (not null)
            if (secondaryColor == null)
            {
                throw new ArgumentNullException("secondaryColor is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.SecondaryColor = secondaryColor;
            // to ensure "primaryColor" is required (not null)
            if (primaryColor == null)
            {
                throw new ArgumentNullException("primaryColor is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.PrimaryColor = primaryColor;
            // to ensure "themeName" is required (not null)
            if (themeName == null)
            {
                throw new ArgumentNullException("themeName is a required property for TransactionInputSupportedParamsTheme and cannot be null");
            }
            this.ThemeName = themeName;
            this.IsDark = isDark;
        }

        /// <summary>
        /// Gets or Sets BorderRadius
        /// </summary>
        [DataMember(Name = "borderRadius", IsRequired = true, EmitDefaultValue = true)]
        public double? BorderRadius { get; set; }

        /// <summary>
        /// Gets or Sets CardColor
        /// </summary>
        [DataMember(Name = "cardColor", IsRequired = true, EmitDefaultValue = true)]
        public string CardColor { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryTextColor
        /// </summary>
        [DataMember(Name = "secondaryTextColor", IsRequired = true, EmitDefaultValue = true)]
        public string SecondaryTextColor { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryTextColor
        /// </summary>
        [DataMember(Name = "primaryTextColor", IsRequired = true, EmitDefaultValue = true)]
        public string PrimaryTextColor { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryColor
        /// </summary>
        [DataMember(Name = "secondaryColor", IsRequired = true, EmitDefaultValue = true)]
        public string SecondaryColor { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryColor
        /// </summary>
        [DataMember(Name = "primaryColor", IsRequired = true, EmitDefaultValue = true)]
        public string PrimaryColor { get; set; }

        /// <summary>
        /// Gets or Sets ThemeName
        /// </summary>
        [DataMember(Name = "themeName", IsRequired = true, EmitDefaultValue = true)]
        public string ThemeName { get; set; }

        /// <summary>
        /// Gets or Sets IsDark
        /// </summary>
        [DataMember(Name = "isDark", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionInputSupportedParamsTheme {\n");
            sb.Append("  BorderRadius: ").Append(BorderRadius).Append("\n");
            sb.Append("  CardColor: ").Append(CardColor).Append("\n");
            sb.Append("  SecondaryTextColor: ").Append(SecondaryTextColor).Append("\n");
            sb.Append("  PrimaryTextColor: ").Append(PrimaryTextColor).Append("\n");
            sb.Append("  SecondaryColor: ").Append(SecondaryColor).Append("\n");
            sb.Append("  PrimaryColor: ").Append(PrimaryColor).Append("\n");
            sb.Append("  ThemeName: ").Append(ThemeName).Append("\n");
            sb.Append("  IsDark: ").Append(IsDark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionInputSupportedParamsTheme);
        }

        /// <summary>
        /// Returns true if TransactionInputSupportedParamsTheme instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionInputSupportedParamsTheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionInputSupportedParamsTheme input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BorderRadius == input.BorderRadius ||
                    (this.BorderRadius != null &&
                    this.BorderRadius.Equals(input.BorderRadius))
                ) && 
                (
                    this.CardColor == input.CardColor ||
                    (this.CardColor != null &&
                    this.CardColor.Equals(input.CardColor))
                ) && 
                (
                    this.SecondaryTextColor == input.SecondaryTextColor ||
                    (this.SecondaryTextColor != null &&
                    this.SecondaryTextColor.Equals(input.SecondaryTextColor))
                ) && 
                (
                    this.PrimaryTextColor == input.PrimaryTextColor ||
                    (this.PrimaryTextColor != null &&
                    this.PrimaryTextColor.Equals(input.PrimaryTextColor))
                ) && 
                (
                    this.SecondaryColor == input.SecondaryColor ||
                    (this.SecondaryColor != null &&
                    this.SecondaryColor.Equals(input.SecondaryColor))
                ) && 
                (
                    this.PrimaryColor == input.PrimaryColor ||
                    (this.PrimaryColor != null &&
                    this.PrimaryColor.Equals(input.PrimaryColor))
                ) && 
                (
                    this.ThemeName == input.ThemeName ||
                    (this.ThemeName != null &&
                    this.ThemeName.Equals(input.ThemeName))
                ) && 
                (
                    this.IsDark == input.IsDark ||
                    this.IsDark.Equals(input.IsDark)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BorderRadius != null)
                {
                    hashCode = (hashCode * 59) + this.BorderRadius.GetHashCode();
                }
                if (this.CardColor != null)
                {
                    hashCode = (hashCode * 59) + this.CardColor.GetHashCode();
                }
                if (this.SecondaryTextColor != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryTextColor.GetHashCode();
                }
                if (this.PrimaryTextColor != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryTextColor.GetHashCode();
                }
                if (this.SecondaryColor != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryColor.GetHashCode();
                }
                if (this.PrimaryColor != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryColor.GetHashCode();
                }
                if (this.ThemeName != null)
                {
                    hashCode = (hashCode * 59) + this.ThemeName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDark.GetHashCode();
                return hashCode;
            }
        }

    }

}
