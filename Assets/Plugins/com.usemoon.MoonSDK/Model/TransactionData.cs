/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// TransactionData
    /// </summary>
    [DataContract(Name = "TransactionData")]
    public partial class TransactionData : IEquatable<TransactionData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionData" /> class.
        /// </summary>
        /// <param name="moonScanUrl">moonScanUrl.</param>
        /// <param name="transactionHash">transactionHash (required).</param>
        /// <param name="signedTransaction">signedTransaction (required).</param>
        /// <param name="signedMessage">signedMessage.</param>
        /// <param name="rawTransaction">rawTransaction.</param>
        /// <param name="signature">signature.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="userOps">userOps.</param>
        /// <param name="useropTransaction">useropTransaction.</param>
        public TransactionData(string moonScanUrl = default(string), string transactionHash = default(string), string signedTransaction = default(string), string signedMessage = default(string), string rawTransaction = default(string), string signature = default(string), Tx transaction = default(Tx), List<TransactionRequest> userOps = default(List<TransactionRequest>), string useropTransaction = default(string))
        {
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for TransactionData and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "signedTransaction" is required (not null)
            if (signedTransaction == null)
            {
                throw new ArgumentNullException("signedTransaction is a required property for TransactionData and cannot be null");
            }
            this.SignedTransaction = signedTransaction;
            this.MoonScanUrl = moonScanUrl;
            this.SignedMessage = signedMessage;
            this.RawTransaction = rawTransaction;
            this.Signature = signature;
            this.Transaction = transaction;
            this.UserOps = userOps;
            this.UseropTransaction = useropTransaction;
        }

        /// <summary>
        /// Gets or Sets MoonScanUrl
        /// </summary>
        [DataMember(Name = "moon_scan_url", EmitDefaultValue = false)]
        public string MoonScanUrl { get; set; }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [DataMember(Name = "transaction_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Gets or Sets SignedTransaction
        /// </summary>
        [DataMember(Name = "signed_transaction", IsRequired = true, EmitDefaultValue = true)]
        public string SignedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets SignedMessage
        /// </summary>
        [DataMember(Name = "signed_message", EmitDefaultValue = false)]
        public string SignedMessage { get; set; }

        /// <summary>
        /// Gets or Sets RawTransaction
        /// </summary>
        [DataMember(Name = "raw_transaction", EmitDefaultValue = false)]
        public string RawTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public Tx Transaction { get; set; }

        /// <summary>
        /// Gets or Sets UserOps
        /// </summary>
        [DataMember(Name = "userOps", EmitDefaultValue = false)]
        public List<TransactionRequest> UserOps { get; set; }

        /// <summary>
        /// Gets or Sets UseropTransaction
        /// </summary>
        [DataMember(Name = "userop_transaction", EmitDefaultValue = false)]
        public string UseropTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionData {\n");
            sb.Append("  MoonScanUrl: ").Append(MoonScanUrl).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  SignedTransaction: ").Append(SignedTransaction).Append("\n");
            sb.Append("  SignedMessage: ").Append(SignedMessage).Append("\n");
            sb.Append("  RawTransaction: ").Append(RawTransaction).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  UserOps: ").Append(UserOps).Append("\n");
            sb.Append("  UseropTransaction: ").Append(UseropTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionData);
        }

        /// <summary>
        /// Returns true if TransactionData instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MoonScanUrl == input.MoonScanUrl ||
                    (this.MoonScanUrl != null &&
                    this.MoonScanUrl.Equals(input.MoonScanUrl))
                ) && 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.SignedTransaction == input.SignedTransaction ||
                    (this.SignedTransaction != null &&
                    this.SignedTransaction.Equals(input.SignedTransaction))
                ) && 
                (
                    this.SignedMessage == input.SignedMessage ||
                    (this.SignedMessage != null &&
                    this.SignedMessage.Equals(input.SignedMessage))
                ) && 
                (
                    this.RawTransaction == input.RawTransaction ||
                    (this.RawTransaction != null &&
                    this.RawTransaction.Equals(input.RawTransaction))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.UserOps == input.UserOps ||
                    this.UserOps != null &&
                    input.UserOps != null &&
                    this.UserOps.SequenceEqual(input.UserOps)
                ) && 
                (
                    this.UseropTransaction == input.UseropTransaction ||
                    (this.UseropTransaction != null &&
                    this.UseropTransaction.Equals(input.UseropTransaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MoonScanUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MoonScanUrl.GetHashCode();
                }
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.SignedTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.SignedTransaction.GetHashCode();
                }
                if (this.SignedMessage != null)
                {
                    hashCode = (hashCode * 59) + this.SignedMessage.GetHashCode();
                }
                if (this.RawTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.RawTransaction.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                if (this.UserOps != null)
                {
                    hashCode = (hashCode * 59) + this.UserOps.GetHashCode();
                }
                if (this.UseropTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.UseropTransaction.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
