/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// SellQuote
    /// </summary>
    [DataContract(Name = "SellQuote")]
    public partial class SellQuote : IEquatable<SellQuote>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellQuote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellQuote() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellQuote" /> class.
        /// </summary>
        /// <param name="recommendations">recommendations (required).</param>
        /// <param name="quoteId">quoteId (required).</param>
        /// <param name="paymentMethod">paymentMethod (required).</param>
        /// <param name="ramp">ramp (required).</param>
        /// <param name="payout">payout (required).</param>
        /// <param name="transactionFee">transactionFee (required).</param>
        /// <param name="networkFee">networkFee (required).</param>
        /// <param name="rate">rate (required).</param>
        public SellQuote(List<string> recommendations = default(List<string>), string quoteId = default(string), string paymentMethod = default(string), string ramp = default(string), double payout = default(double), double transactionFee = default(double), double networkFee = default(double), double rate = default(double))
        {
            // to ensure "recommendations" is required (not null)
            if (recommendations == null)
            {
                throw new ArgumentNullException("recommendations is a required property for SellQuote and cannot be null");
            }
            this.Recommendations = recommendations;
            // to ensure "quoteId" is required (not null)
            if (quoteId == null)
            {
                throw new ArgumentNullException("quoteId is a required property for SellQuote and cannot be null");
            }
            this.QuoteId = quoteId;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new ArgumentNullException("paymentMethod is a required property for SellQuote and cannot be null");
            }
            this.PaymentMethod = paymentMethod;
            // to ensure "ramp" is required (not null)
            if (ramp == null)
            {
                throw new ArgumentNullException("ramp is a required property for SellQuote and cannot be null");
            }
            this.Ramp = ramp;
            this.Payout = payout;
            this.TransactionFee = transactionFee;
            this.NetworkFee = networkFee;
            this.Rate = rate;
        }

        /// <summary>
        /// Gets or Sets Recommendations
        /// </summary>
        [DataMember(Name = "recommendations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Recommendations { get; set; }

        /// <summary>
        /// Gets or Sets QuoteId
        /// </summary>
        [DataMember(Name = "quoteId", IsRequired = true, EmitDefaultValue = true)]
        public string QuoteId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Ramp
        /// </summary>
        [DataMember(Name = "ramp", IsRequired = true, EmitDefaultValue = true)]
        public string Ramp { get; set; }

        /// <summary>
        /// Gets or Sets Payout
        /// </summary>
        [DataMember(Name = "payout", IsRequired = true, EmitDefaultValue = true)]
        public double Payout { get; set; }

        /// <summary>
        /// Gets or Sets TransactionFee
        /// </summary>
        [DataMember(Name = "transactionFee", IsRequired = true, EmitDefaultValue = true)]
        public double TransactionFee { get; set; }

        /// <summary>
        /// Gets or Sets NetworkFee
        /// </summary>
        [DataMember(Name = "networkFee", IsRequired = true, EmitDefaultValue = true)]
        public double NetworkFee { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", IsRequired = true, EmitDefaultValue = true)]
        public double Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SellQuote {\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("  QuoteId: ").Append(QuoteId).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Ramp: ").Append(Ramp).Append("\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  TransactionFee: ").Append(TransactionFee).Append("\n");
            sb.Append("  NetworkFee: ").Append(NetworkFee).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellQuote);
        }

        /// <summary>
        /// Returns true if SellQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of SellQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellQuote input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Recommendations == input.Recommendations ||
                    this.Recommendations != null &&
                    input.Recommendations != null &&
                    this.Recommendations.SequenceEqual(input.Recommendations)
                ) && 
                (
                    this.QuoteId == input.QuoteId ||
                    (this.QuoteId != null &&
                    this.QuoteId.Equals(input.QuoteId))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Ramp == input.Ramp ||
                    (this.Ramp != null &&
                    this.Ramp.Equals(input.Ramp))
                ) && 
                (
                    this.Payout == input.Payout ||
                    this.Payout.Equals(input.Payout)
                ) && 
                (
                    this.TransactionFee == input.TransactionFee ||
                    this.TransactionFee.Equals(input.TransactionFee)
                ) && 
                (
                    this.NetworkFee == input.NetworkFee ||
                    this.NetworkFee.Equals(input.NetworkFee)
                ) && 
                (
                    this.Rate == input.Rate ||
                    this.Rate.Equals(input.Rate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recommendations != null)
                {
                    hashCode = (hashCode * 59) + this.Recommendations.GetHashCode();
                }
                if (this.QuoteId != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteId.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.Ramp != null)
                {
                    hashCode = (hashCode * 59) + this.Ramp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Payout.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionFee.GetHashCode();
                hashCode = (hashCode * 59) + this.NetworkFee.GetHashCode();
                hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                return hashCode;
            }
        }

    }

}
