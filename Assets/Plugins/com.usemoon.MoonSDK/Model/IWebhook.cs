/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// IWebhook
    /// </summary>
    [DataContract(Name = "IWebhook")]
    public partial class IWebhook : IEquatable<IWebhook>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IWebhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IWebhook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IWebhook" /> class.
        /// </summary>
        /// <param name="block">block (required).</param>
        /// <param name="chainId">chainId (required).</param>
        /// <param name="logs">logs (required).</param>
        /// <param name="txs">txs (required).</param>
        /// <param name="txsInternal">txsInternal (required).</param>
        /// <param name="abi">abi (required).</param>
        /// <param name="retries">retries (required).</param>
        /// <param name="confirmed">confirmed (required).</param>
        /// <param name="tag">tag (required).</param>
        /// <param name="streamId">streamId (required).</param>
        /// <param name="erc20Transfers">erc20Transfers (required).</param>
        /// <param name="erc20Approvals">erc20Approvals (required).</param>
        /// <param name="nftTransfers">nftTransfers (required).</param>
        /// <param name="nativeBalances">nativeBalances (required).</param>
        /// <param name="nftApprovals">nftApprovals (required).</param>
        /// <param name="nftTokenApprovals">nftTokenApprovals (required).</param>
        public IWebhook(Block block = default(Block), string chainId = default(string), List<Log> logs = default(List<Log>), List<Transaction> txs = default(List<Transaction>), List<InternalTransaction> txsInternal = default(List<InternalTransaction>), List<AbiItem> abi = default(List<AbiItem>), double retries = default(double), bool confirmed = default(bool), string tag = default(string), string streamId = default(string), List<IERC20Transfer> erc20Transfers = default(List<IERC20Transfer>), List<IERC20Approval> erc20Approvals = default(List<IERC20Approval>), List<INFTTransfer> nftTransfers = default(List<INFTTransfer>), List<INativeBalance> nativeBalances = default(List<INativeBalance>), IOldNFTApproval nftApprovals = default(IOldNFTApproval), List<INFTApproval> nftTokenApprovals = default(List<INFTApproval>))
        {
            // to ensure "block" is required (not null)
            if (block == null)
            {
                throw new ArgumentNullException("block is a required property for IWebhook and cannot be null");
            }
            this.Block = block;
            // to ensure "chainId" is required (not null)
            if (chainId == null)
            {
                throw new ArgumentNullException("chainId is a required property for IWebhook and cannot be null");
            }
            this.ChainId = chainId;
            // to ensure "logs" is required (not null)
            if (logs == null)
            {
                throw new ArgumentNullException("logs is a required property for IWebhook and cannot be null");
            }
            this.Logs = logs;
            // to ensure "txs" is required (not null)
            if (txs == null)
            {
                throw new ArgumentNullException("txs is a required property for IWebhook and cannot be null");
            }
            this.Txs = txs;
            // to ensure "txsInternal" is required (not null)
            if (txsInternal == null)
            {
                throw new ArgumentNullException("txsInternal is a required property for IWebhook and cannot be null");
            }
            this.TxsInternal = txsInternal;
            // to ensure "abi" is required (not null)
            if (abi == null)
            {
                throw new ArgumentNullException("abi is a required property for IWebhook and cannot be null");
            }
            this.Abi = abi;
            this.Retries = retries;
            this.Confirmed = confirmed;
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new ArgumentNullException("tag is a required property for IWebhook and cannot be null");
            }
            this.Tag = tag;
            // to ensure "streamId" is required (not null)
            if (streamId == null)
            {
                throw new ArgumentNullException("streamId is a required property for IWebhook and cannot be null");
            }
            this.StreamId = streamId;
            // to ensure "erc20Transfers" is required (not null)
            if (erc20Transfers == null)
            {
                throw new ArgumentNullException("erc20Transfers is a required property for IWebhook and cannot be null");
            }
            this.Erc20Transfers = erc20Transfers;
            // to ensure "erc20Approvals" is required (not null)
            if (erc20Approvals == null)
            {
                throw new ArgumentNullException("erc20Approvals is a required property for IWebhook and cannot be null");
            }
            this.Erc20Approvals = erc20Approvals;
            // to ensure "nftTransfers" is required (not null)
            if (nftTransfers == null)
            {
                throw new ArgumentNullException("nftTransfers is a required property for IWebhook and cannot be null");
            }
            this.NftTransfers = nftTransfers;
            // to ensure "nativeBalances" is required (not null)
            if (nativeBalances == null)
            {
                throw new ArgumentNullException("nativeBalances is a required property for IWebhook and cannot be null");
            }
            this.NativeBalances = nativeBalances;
            // to ensure "nftApprovals" is required (not null)
            if (nftApprovals == null)
            {
                throw new ArgumentNullException("nftApprovals is a required property for IWebhook and cannot be null");
            }
            this.NftApprovals = nftApprovals;
            // to ensure "nftTokenApprovals" is required (not null)
            if (nftTokenApprovals == null)
            {
                throw new ArgumentNullException("nftTokenApprovals is a required property for IWebhook and cannot be null");
            }
            this.NftTokenApprovals = nftTokenApprovals;
        }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", IsRequired = true, EmitDefaultValue = true)]
        public Block Block { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public string ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [DataMember(Name = "logs", IsRequired = true, EmitDefaultValue = true)]
        public List<Log> Logs { get; set; }

        /// <summary>
        /// Gets or Sets Txs
        /// </summary>
        [DataMember(Name = "txs", IsRequired = true, EmitDefaultValue = true)]
        public List<Transaction> Txs { get; set; }

        /// <summary>
        /// Gets or Sets TxsInternal
        /// </summary>
        [DataMember(Name = "txsInternal", IsRequired = true, EmitDefaultValue = true)]
        public List<InternalTransaction> TxsInternal { get; set; }

        /// <summary>
        /// Gets or Sets Abi
        /// </summary>
        [DataMember(Name = "abi", IsRequired = true, EmitDefaultValue = true)]
        public List<AbiItem> Abi { get; set; }

        /// <summary>
        /// Gets or Sets Retries
        /// </summary>
        [DataMember(Name = "retries", IsRequired = true, EmitDefaultValue = true)]
        public double Retries { get; set; }

        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [DataMember(Name = "confirmed", IsRequired = true, EmitDefaultValue = true)]
        public bool Confirmed { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", IsRequired = true, EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets StreamId
        /// </summary>
        [DataMember(Name = "streamId", IsRequired = true, EmitDefaultValue = true)]
        public string StreamId { get; set; }

        /// <summary>
        /// Gets or Sets Erc20Transfers
        /// </summary>
        [DataMember(Name = "erc20Transfers", IsRequired = true, EmitDefaultValue = true)]
        public List<IERC20Transfer> Erc20Transfers { get; set; }

        /// <summary>
        /// Gets or Sets Erc20Approvals
        /// </summary>
        [DataMember(Name = "erc20Approvals", IsRequired = true, EmitDefaultValue = true)]
        public List<IERC20Approval> Erc20Approvals { get; set; }

        /// <summary>
        /// Gets or Sets NftTransfers
        /// </summary>
        [DataMember(Name = "nftTransfers", IsRequired = true, EmitDefaultValue = true)]
        public List<INFTTransfer> NftTransfers { get; set; }

        /// <summary>
        /// Gets or Sets NativeBalances
        /// </summary>
        [DataMember(Name = "nativeBalances", IsRequired = true, EmitDefaultValue = true)]
        public List<INativeBalance> NativeBalances { get; set; }

        /// <summary>
        /// Gets or Sets NftApprovals
        /// </summary>
        [DataMember(Name = "nftApprovals", IsRequired = true, EmitDefaultValue = true)]
        public IOldNFTApproval NftApprovals { get; set; }

        /// <summary>
        /// Gets or Sets NftTokenApprovals
        /// </summary>
        [DataMember(Name = "nftTokenApprovals", IsRequired = true, EmitDefaultValue = true)]
        public List<INFTApproval> NftTokenApprovals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IWebhook {\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Txs: ").Append(Txs).Append("\n");
            sb.Append("  TxsInternal: ").Append(TxsInternal).Append("\n");
            sb.Append("  Abi: ").Append(Abi).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Erc20Transfers: ").Append(Erc20Transfers).Append("\n");
            sb.Append("  Erc20Approvals: ").Append(Erc20Approvals).Append("\n");
            sb.Append("  NftTransfers: ").Append(NftTransfers).Append("\n");
            sb.Append("  NativeBalances: ").Append(NativeBalances).Append("\n");
            sb.Append("  NftApprovals: ").Append(NftApprovals).Append("\n");
            sb.Append("  NftTokenApprovals: ").Append(NftTokenApprovals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IWebhook);
        }

        /// <summary>
        /// Returns true if IWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of IWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IWebhook input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    (this.ChainId != null &&
                    this.ChainId.Equals(input.ChainId))
                ) && 
                (
                    this.Logs == input.Logs ||
                    this.Logs != null &&
                    input.Logs != null &&
                    this.Logs.SequenceEqual(input.Logs)
                ) && 
                (
                    this.Txs == input.Txs ||
                    this.Txs != null &&
                    input.Txs != null &&
                    this.Txs.SequenceEqual(input.Txs)
                ) && 
                (
                    this.TxsInternal == input.TxsInternal ||
                    this.TxsInternal != null &&
                    input.TxsInternal != null &&
                    this.TxsInternal.SequenceEqual(input.TxsInternal)
                ) && 
                (
                    this.Abi == input.Abi ||
                    this.Abi != null &&
                    input.Abi != null &&
                    this.Abi.SequenceEqual(input.Abi)
                ) && 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                ) && 
                (
                    this.Confirmed == input.Confirmed ||
                    this.Confirmed.Equals(input.Confirmed)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.StreamId == input.StreamId ||
                    (this.StreamId != null &&
                    this.StreamId.Equals(input.StreamId))
                ) && 
                (
                    this.Erc20Transfers == input.Erc20Transfers ||
                    this.Erc20Transfers != null &&
                    input.Erc20Transfers != null &&
                    this.Erc20Transfers.SequenceEqual(input.Erc20Transfers)
                ) && 
                (
                    this.Erc20Approvals == input.Erc20Approvals ||
                    this.Erc20Approvals != null &&
                    input.Erc20Approvals != null &&
                    this.Erc20Approvals.SequenceEqual(input.Erc20Approvals)
                ) && 
                (
                    this.NftTransfers == input.NftTransfers ||
                    this.NftTransfers != null &&
                    input.NftTransfers != null &&
                    this.NftTransfers.SequenceEqual(input.NftTransfers)
                ) && 
                (
                    this.NativeBalances == input.NativeBalances ||
                    this.NativeBalances != null &&
                    input.NativeBalances != null &&
                    this.NativeBalances.SequenceEqual(input.NativeBalances)
                ) && 
                (
                    this.NftApprovals == input.NftApprovals ||
                    (this.NftApprovals != null &&
                    this.NftApprovals.Equals(input.NftApprovals))
                ) && 
                (
                    this.NftTokenApprovals == input.NftTokenApprovals ||
                    this.NftTokenApprovals != null &&
                    input.NftTokenApprovals != null &&
                    this.NftTokenApprovals.SequenceEqual(input.NftTokenApprovals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.ChainId != null)
                {
                    hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                }
                if (this.Logs != null)
                {
                    hashCode = (hashCode * 59) + this.Logs.GetHashCode();
                }
                if (this.Txs != null)
                {
                    hashCode = (hashCode * 59) + this.Txs.GetHashCode();
                }
                if (this.TxsInternal != null)
                {
                    hashCode = (hashCode * 59) + this.TxsInternal.GetHashCode();
                }
                if (this.Abi != null)
                {
                    hashCode = (hashCode * 59) + this.Abi.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Retries.GetHashCode();
                hashCode = (hashCode * 59) + this.Confirmed.GetHashCode();
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                if (this.StreamId != null)
                {
                    hashCode = (hashCode * 59) + this.StreamId.GetHashCode();
                }
                if (this.Erc20Transfers != null)
                {
                    hashCode = (hashCode * 59) + this.Erc20Transfers.GetHashCode();
                }
                if (this.Erc20Approvals != null)
                {
                    hashCode = (hashCode * 59) + this.Erc20Approvals.GetHashCode();
                }
                if (this.NftTransfers != null)
                {
                    hashCode = (hashCode * 59) + this.NftTransfers.GetHashCode();
                }
                if (this.NativeBalances != null)
                {
                    hashCode = (hashCode * 59) + this.NativeBalances.GetHashCode();
                }
                if (this.NftApprovals != null)
                {
                    hashCode = (hashCode * 59) + this.NftApprovals.GetHashCode();
                }
                if (this.NftTokenApprovals != null)
                {
                    hashCode = (hashCode * 59) + this.NftTokenApprovals.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
