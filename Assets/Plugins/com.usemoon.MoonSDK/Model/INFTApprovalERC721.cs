/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// INFTApprovalERC721
    /// </summary>
    [DataContract(Name = "INFTApprovalERC721")]
    public partial class INFTApprovalERC721 : IEquatable<INFTApprovalERC721>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="INFTApprovalERC721" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected INFTApprovalERC721() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="INFTApprovalERC721" /> class.
        /// </summary>
        /// <param name="transactionHash">transactionHash (required).</param>
        /// <param name="contract">contract (required).</param>
        /// <param name="logIndex">logIndex (required).</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="approved">approved (required).</param>
        /// <param name="tokenId">tokenId (required).</param>
        /// <param name="tokenContractType">tokenContractType (required).</param>
        /// <param name="tokenName">tokenName (required).</param>
        /// <param name="tokenSymbol">tokenSymbol (required).</param>
        public INFTApprovalERC721(string transactionHash = default(string), string contract = default(string), string logIndex = default(string), string owner = default(string), string approved = default(string), string tokenId = default(string), string tokenContractType = default(string), string tokenName = default(string), string tokenSymbol = default(string))
        {
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new ArgumentNullException("contract is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.Contract = contract;
            // to ensure "logIndex" is required (not null)
            if (logIndex == null)
            {
                throw new ArgumentNullException("logIndex is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.LogIndex = logIndex;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.Owner = owner;
            // to ensure "approved" is required (not null)
            if (approved == null)
            {
                throw new ArgumentNullException("approved is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.Approved = approved;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "tokenContractType" is required (not null)
            if (tokenContractType == null)
            {
                throw new ArgumentNullException("tokenContractType is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.TokenContractType = tokenContractType;
            // to ensure "tokenName" is required (not null)
            if (tokenName == null)
            {
                throw new ArgumentNullException("tokenName is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.TokenName = tokenName;
            // to ensure "tokenSymbol" is required (not null)
            if (tokenSymbol == null)
            {
                throw new ArgumentNullException("tokenSymbol is a required property for INFTApprovalERC721 and cannot be null");
            }
            this.TokenSymbol = tokenSymbol;
        }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [DataMember(Name = "transactionHash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name = "contract", IsRequired = true, EmitDefaultValue = true)]
        public string Contract { get; set; }

        /// <summary>
        /// Gets or Sets LogIndex
        /// </summary>
        [DataMember(Name = "logIndex", IsRequired = true, EmitDefaultValue = true)]
        public string LogIndex { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", IsRequired = true, EmitDefaultValue = true)]
        public string Approved { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or Sets TokenContractType
        /// </summary>
        [DataMember(Name = "tokenContractType", IsRequired = true, EmitDefaultValue = true)]
        public string TokenContractType { get; set; }

        /// <summary>
        /// Gets or Sets TokenName
        /// </summary>
        [DataMember(Name = "tokenName", IsRequired = true, EmitDefaultValue = true)]
        public string TokenName { get; set; }

        /// <summary>
        /// Gets or Sets TokenSymbol
        /// </summary>
        [DataMember(Name = "tokenSymbol", IsRequired = true, EmitDefaultValue = true)]
        public string TokenSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class INFTApprovalERC721 {\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  TokenContractType: ").Append(TokenContractType).Append("\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  TokenSymbol: ").Append(TokenSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as INFTApprovalERC721);
        }

        /// <summary>
        /// Returns true if INFTApprovalERC721 instances are equal
        /// </summary>
        /// <param name="input">Instance of INFTApprovalERC721 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(INFTApprovalERC721 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.LogIndex == input.LogIndex ||
                    (this.LogIndex != null &&
                    this.LogIndex.Equals(input.LogIndex))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Approved == input.Approved ||
                    (this.Approved != null &&
                    this.Approved.Equals(input.Approved))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.TokenContractType == input.TokenContractType ||
                    (this.TokenContractType != null &&
                    this.TokenContractType.Equals(input.TokenContractType))
                ) && 
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) && 
                (
                    this.TokenSymbol == input.TokenSymbol ||
                    (this.TokenSymbol != null &&
                    this.TokenSymbol.Equals(input.TokenSymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                if (this.LogIndex != null)
                {
                    hashCode = (hashCode * 59) + this.LogIndex.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.Approved != null)
                {
                    hashCode = (hashCode * 59) + this.Approved.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.TokenContractType != null)
                {
                    hashCode = (hashCode * 59) + this.TokenContractType.GetHashCode();
                }
                if (this.TokenName != null)
                {
                    hashCode = (hashCode * 59) + this.TokenName.GetHashCode();
                }
                if (this.TokenSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.TokenSymbol.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
