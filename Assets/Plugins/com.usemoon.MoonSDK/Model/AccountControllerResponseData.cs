/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;
using System.Reflection;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// AccountControllerResponseData
    /// </summary>
    [JsonConverter(typeof(AccountControllerResponseDataJsonConverter))]
    [DataContract(Name = "AccountControllerResponse_data")]
    public partial class AccountControllerResponseData : AbstractOpenAPISchema, IEquatable<AccountControllerResponseData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="NonceResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NonceResponse.</param>
        public AccountControllerResponseData(NonceResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="BalanceResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BalanceResponse.</param>
        public AccountControllerResponseData(BalanceResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="Transaction" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Transaction.</param>
        public AccountControllerResponseData(Transaction actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="AccountResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountResponse.</param>
        public AccountControllerResponseData(AccountResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="SignMessage" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SignMessage.</param>
        public AccountControllerResponseData(SignMessage actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="EnsResolveResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EnsResolveResponse.</param>
        public AccountControllerResponseData(EnsResolveResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="ENSReverseResolveResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ENSReverseResolveResponse.</param>
        public AccountControllerResponseData(ENSReverseResolveResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="AaveReservesData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AaveReservesData.</param>
        public AccountControllerResponseData(AaveReservesData actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="Erc20Response" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Erc20Response.</param>
        public AccountControllerResponseData(Erc20Response actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="Erc1155Response" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Erc1155Response.</param>
        public AccountControllerResponseData(Erc1155Response actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="BroadCastRawTransactionResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BroadCastRawTransactionResponse.</param>
        public AccountControllerResponseData(BroadCastRawTransactionResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="BitcoinTransactionOutput" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BitcoinTransactionOutput.</param>
        public AccountControllerResponseData(BitcoinTransactionOutput actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountControllerResponseData" /> class
        /// with the <see cref="Erc721Response" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Erc721Response.</param>
        public AccountControllerResponseData(Erc721Response actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AaveReservesData))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AccountResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(BalanceResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(BitcoinTransactionOutput))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(BroadCastRawTransactionResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ENSReverseResolveResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EnsResolveResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Erc1155Response))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Erc20Response))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Erc721Response))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(NonceResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SignMessage))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Transaction))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `NonceResponse`. If the actual instance is not `NonceResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NonceResponse</returns>
        public NonceResponse GetNonceResponse()
        {
            return (NonceResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BalanceResponse`. If the actual instance is not `BalanceResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BalanceResponse</returns>
        public BalanceResponse GetBalanceResponse()
        {
            return (BalanceResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Transaction`. If the actual instance is not `Transaction`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Transaction</returns>
        public Transaction GetTransaction()
        {
            return (Transaction)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AccountResponse`. If the actual instance is not `AccountResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountResponse</returns>
        public AccountResponse GetAccountResponse()
        {
            return (AccountResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SignMessage`. If the actual instance is not `SignMessage`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SignMessage</returns>
        public SignMessage GetSignMessage()
        {
            return (SignMessage)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EnsResolveResponse`. If the actual instance is not `EnsResolveResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EnsResolveResponse</returns>
        public EnsResolveResponse GetEnsResolveResponse()
        {
            return (EnsResolveResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ENSReverseResolveResponse`. If the actual instance is not `ENSReverseResolveResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ENSReverseResolveResponse</returns>
        public ENSReverseResolveResponse GetENSReverseResolveResponse()
        {
            return (ENSReverseResolveResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AaveReservesData`. If the actual instance is not `AaveReservesData`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AaveReservesData</returns>
        public AaveReservesData GetAaveReservesData()
        {
            return (AaveReservesData)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Erc20Response`. If the actual instance is not `Erc20Response`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Erc20Response</returns>
        public Erc20Response GetErc20Response()
        {
            return (Erc20Response)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Erc1155Response`. If the actual instance is not `Erc1155Response`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Erc1155Response</returns>
        public Erc1155Response GetErc1155Response()
        {
            return (Erc1155Response)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BroadCastRawTransactionResponse`. If the actual instance is not `BroadCastRawTransactionResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BroadCastRawTransactionResponse</returns>
        public BroadCastRawTransactionResponse GetBroadCastRawTransactionResponse()
        {
            return (BroadCastRawTransactionResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BitcoinTransactionOutput`. If the actual instance is not `BitcoinTransactionOutput`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BitcoinTransactionOutput</returns>
        public BitcoinTransactionOutput GetBitcoinTransactionOutput()
        {
            return (BitcoinTransactionOutput)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Erc721Response`. If the actual instance is not `Erc721Response`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Erc721Response</returns>
        public Erc721Response GetErc721Response()
        {
            return (Erc721Response)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountControllerResponseData {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AccountControllerResponseData.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AccountControllerResponseData
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AccountControllerResponseData</returns>
        public static AccountControllerResponseData FromJson(string jsonString)
        {
            AccountControllerResponseData newAccountControllerResponseData = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAccountControllerResponseData;
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<AaveReservesData>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AaveReservesData: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<AccountResponse>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<BalanceResponse>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into BalanceResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<BitcoinTransactionOutput>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into BitcoinTransactionOutput: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<BroadCastRawTransactionResponse>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into BroadCastRawTransactionResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<ENSReverseResolveResponse>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ENSReverseResolveResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<EnsResolveResponse>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EnsResolveResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<Erc1155Response>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Erc1155Response: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<Erc20Response>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Erc20Response: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<Erc721Response>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Erc721Response: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<NonceResponse>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NonceResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<SignMessage>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SignMessage: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountControllerResponseData = new AccountControllerResponseData(JsonConvert.DeserializeObject<Transaction>(jsonString, AccountControllerResponseData.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountControllerResponseData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Transaction: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountControllerResponseData);
        }

        /// <summary>
        /// Returns true if AccountControllerResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountControllerResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountControllerResponseData input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

    }

    /// <summary>
    /// Custom JSON converter for AccountControllerResponseData
    /// </summary>
    public class AccountControllerResponseDataJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AccountControllerResponseData).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return AccountControllerResponseData.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
