/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = com.usemoon.MoonSDK.Client.OpenAPIDateConverter;

namespace com.usemoon.MoonSDK.Model
{
    /// <summary>
    /// TransactionRequest
    /// </summary>
    [DataContract(Name = "TransactionRequest")]
    public partial class TransactionRequest : IEquatable<TransactionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRequest" /> class.
        /// </summary>
        /// <param name="nonce">nonce.</param>
        /// <param name="data">data.</param>
        /// <param name="value">value.</param>
        /// <param name="to">to.</param>
        /// <param name="from">from.</param>
        /// <param name="maxFeePerGas">maxFeePerGas.</param>
        /// <param name="maxPriorityFeePerGas">maxPriorityFeePerGas.</param>
        public TransactionRequest(string nonce = default(string), string data = default(string), string value = default(string), string to = default(string), string from = default(string), string maxFeePerGas = default(string), string maxPriorityFeePerGas = default(string))
        {
            this.Nonce = nonce;
            this.Data = data;
            this.Value = value;
            this.To = to;
            this.From = from;
            this.MaxFeePerGas = maxFeePerGas;
            this.MaxPriorityFeePerGas = maxPriorityFeePerGas;
        }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets MaxFeePerGas
        /// </summary>
        [DataMember(Name = "maxFeePerGas", EmitDefaultValue = false)]
        public string MaxFeePerGas { get; set; }

        /// <summary>
        /// Gets or Sets MaxPriorityFeePerGas
        /// </summary>
        [DataMember(Name = "maxPriorityFeePerGas", EmitDefaultValue = false)]
        public string MaxPriorityFeePerGas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionRequest {\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  MaxFeePerGas: ").Append(MaxFeePerGas).Append("\n");
            sb.Append("  MaxPriorityFeePerGas: ").Append(MaxPriorityFeePerGas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionRequest);
        }

        /// <summary>
        /// Returns true if TransactionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.MaxFeePerGas == input.MaxFeePerGas ||
                    (this.MaxFeePerGas != null &&
                    this.MaxFeePerGas.Equals(input.MaxFeePerGas))
                ) && 
                (
                    this.MaxPriorityFeePerGas == input.MaxPriorityFeePerGas ||
                    (this.MaxPriorityFeePerGas != null &&
                    this.MaxPriorityFeePerGas.Equals(input.MaxPriorityFeePerGas))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.MaxFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerGas.GetHashCode();
                }
                if (this.MaxPriorityFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPriorityFeePerGas.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
